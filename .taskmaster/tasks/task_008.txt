# Task ID: 8
# Title: Contact Form Backend API Implementation
# Status: pending
# Dependencies: 7
# Priority: high
# Description: Develop the backend API for the contact form with email sending functionality.
# Details:
1. Set up Express server:
```javascript
// server/index.js
const express = require('express');
const cors = require('cors');
const { z } = require('zod');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(cors({ origin: process.env.NEXT_PUBLIC_FRONTEND_URL }));

// Rate limiting middleware
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // 5 requests per window
  message: { error: 'Too many requests, please try again later.' }
});

app.post('/contact', limiter, async (req, res) => {
  // Implement contact form handling with validation
  // Send emails to both site owner and customer
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```
2. Implement form validation with Zod
3. Set up Nodemailer for sending emails:
```javascript
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  }
});

async function sendEmail(to, subject, html) {
  const mailOptions = {
    from: process.env.MAIL_FROM,
    to,
    subject,
    html
  };
  
  return transporter.sendMail(mailOptions);
}
```
4. Create email templates for owner and customer
5. Implement error handling and logging

# Test Strategy:
1. Unit test validation logic
2. Test rate limiting functionality
3. Mock email sending to verify templates
4. Test error handling with various scenarios
5. Verify CORS configuration works correctly
6. Load test to ensure stability under higher traffic

# Subtasks:
## 1. Implement Zod validation schema for contact form [pending]
### Dependencies: None
### Description: Create a Zod schema to validate the contact form data including name, email, subject, and message fields with appropriate constraints.
### Details:
// Create a validation schema in server/validation.js
const contactSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters').max(100),
  email: z.string().email('Please enter a valid email address'),
  subject: z.string().min(5, 'Subject must be at least 5 characters').max(200),
  message: z.string().min(10, 'Message must be at least 10 characters').max(1000)
});

module.exports = { contactSchema };

## 2. Create email templates for customer and owner notifications [pending]
### Dependencies: None
### Description: Develop HTML email templates for both the confirmation email sent to the customer and the notification email sent to the site owner.
### Details:
// Create templates in server/emailTemplates.js
function getOwnerEmailTemplate(formData) {
  return `
    <h2>New Contact Form Submission</h2>
    <p><strong>Name:</strong> ${formData.name}</p>
    <p><strong>Email:</strong> ${formData.email}</p>
    <p><strong>Subject:</strong> ${formData.subject}</p>
    <p><strong>Message:</strong></p>
    <p>${formData.message}</p>
  `;
}

function getCustomerEmailTemplate(formData) {
  return `
    <h2>Thank you for contacting us!</h2>
    <p>Dear ${formData.name},</p>
    <p>We have received your message regarding "${formData.subject}" and will get back to you as soon as possible.</p>
    <p>For your records, here is a copy of your message:</p>
    <p>${formData.message}</p>
    <p>Best regards,<br>The P&D Web Development Team</p>
  `;
}

module.exports = { getOwnerEmailTemplate, getCustomerEmailTemplate };

## 4. Integrate email sending functionality with Nodemailer [pending]
### Dependencies: 8.2, 8.3
### Description: Implement the email sending logic using Nodemailer to send confirmation emails to customers and notification emails to the site owner.
### Details:
// In server/index.js, integrate the email templates and sending functionality
const { getOwnerEmailTemplate, getCustomerEmailTemplate } = require('./emailTemplates');

app.post('/contact', limiter, async (req, res) => {
  try {
    // Validate the request body
    const validatedData = contactSchema.parse(req.body);
    
    // Send email to site owner
    await sendEmail(
      process.env.MAIL_TO,
      `New Contact Form: ${validatedData.subject}`,
      getOwnerEmailTemplate(validatedData)
    );
    
    // Send confirmation email to customer
    await sendEmail(
      validatedData.email,
      'Thank you for contacting P&D Web Development',
      getCustomerEmailTemplate(validatedData)
    );
    
    res.status(200).json({ success: true, message: 'Form submitted successfully' });
  } catch (error) {
    // Error handling as implemented in previous subtask
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        success: false, 
        errors: error.errors.map(e => ({ path: e.path.join('.'), message: e.message }))
      });
    }
    
    console.error('Contact form error:', error);
    res.status(500).json({ success: false, message: 'Server error, please try again later' });
  }
});

## 5. Implement logging and security enhancements [pending]
### Dependencies: 8.4
### Description: Add comprehensive logging, input sanitization, and additional security measures to protect the contact form API from abuse.
### Details:
// Add these enhancements to server/index.js
const winston = require('winston');
const sanitizeHtml = require('sanitize-html');

// Set up logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}

// Sanitize input function
function sanitizeInput(data) {
  return {
    name: sanitizeHtml(data.name),
    email: sanitizeHtml(data.email),
    subject: sanitizeHtml(data.subject),
    message: sanitizeHtml(data.message)
  };
}

// Update the contact endpoint
app.post('/contact', limiter, async (req, res) => {
  try {
    // Log incoming request (excluding sensitive data)
    logger.info(`Contact form submission from ${req.ip}`);
    
    // Validate the request body
    const validatedData = contactSchema.parse(req.body);
    
    // Sanitize inputs to prevent XSS in emails
    const sanitizedData = sanitizeInput(validatedData);
    
    // Send emails as implemented in previous subtask
    // ...
    
    logger.info(`Successfully processed contact form for ${sanitizedData.email}`);
    res.status(200).json({ success: true, message: 'Form submitted successfully' });
  } catch (error) {
    // Enhanced error logging
    if (error instanceof z.ZodError) {
      logger.warn(`Validation error: ${JSON.stringify(error.errors)}`);
      return res.status(400).json({ 
        success: false, 
        errors: error.errors.map(e => ({ path: e.path.join('.'), message: e.message }))
      });
    }
    
    logger.error('Contact form error:', { error: error.message, stack: error.stack });
    res.status(500).json({ success: false, message: 'Server error, please try again later' });
  }
});

