# Task ID: 7
# Title: Contact Form Frontend Implementation
# Status: pending
# Dependencies: 3
# Priority: high
# Description: Create the Contact page with form validation and user feedback.
# Details:
1. Create page component in app/contact/page.tsx:
```typescript
import { Metadata } from 'next';
import ContactForm from '@/components/contact/ContactForm';
import ContactInfo from '@/components/contact/ContactInfo';

export const metadata: Metadata = {
  title: 'Contact Us - P&D Web Development',
  description: 'Get in touch with P&D Web Development',
  // Add OG image metadata
};

export default function ContactPage() {
  return (
    <section className="container mx-auto py-12">
      <h1 className="text-4xl font-bold mb-8">Contact Us</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <ContactInfo />
        <ContactForm />
      </div>
    </section>
  );
}
```
2. Implement ContactForm component with client-side validation:
```typescript
'use client';
import { useState } from 'react';
import { z } from 'zod';
import { Button } from '@/components/ui/Button';

const formSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email address'),
  message: z.string().min(10, 'Message must be at least 10 characters')
});

export default function ContactForm() {
  const [formData, setFormData] = useState({ name: '', email: '', message: '' });
  const [errors, setErrors] = useState({});
  const [status, setStatus] = useState('idle'); // idle, submitting, success, error
  
  // Implement form handling, validation, submission
  // Show loading, success, and error states
}
```
3. Add rate limiting UI feedback
4. Implement accessible form elements with proper labels and ARIA attributes
5. Create success and error states with appropriate messaging

# Test Strategy:
1. Test form validation for all fields
2. Verify form accessibility using screen readers and keyboard navigation
3. Test form submission with mock API
4. Verify success and error states display correctly
5. Test form responsiveness at different viewport sizes

# Subtasks:
## 1. Create ContactInfo Component [pending]
### Dependencies: None
### Description: Implement the ContactInfo component that displays contact information, including address, phone, email, and social media links.
### Details:
Create a new file at components/contact/ContactInfo.tsx:
```typescript
export default function ContactInfo() {
  return (
    <div className="bg-gray-50 p-6 rounded-lg shadow-sm">
      <h2 className="text-2xl font-semibold mb-4">Get In Touch</h2>
      
      <div className="space-y-4">
        <div>
          <h3 className="font-medium text-gray-900">Address</h3>
          <p className="text-gray-600">123 Web Dev Street, Digital City, 10101</p>
        </div>
        
        <div>
          <h3 className="font-medium text-gray-900">Email</h3>
          <a href="mailto:contact@pdwebdev.com" className="text-blue-600 hover:underline">
            contact@pdwebdev.com
          </a>
        </div>
        
        <div>
          <h3 className="font-medium text-gray-900">Phone</h3>
          <a href="tel:+15551234567" className="text-blue-600 hover:underline">
            (555) 123-4567
          </a>
        </div>
        
        <div>
          <h3 className="font-medium text-gray-900">Follow Us</h3>
          <div className="flex space-x-4 mt-2">
            <a href="https://twitter.com" aria-label="Twitter" className="text-gray-600 hover:text-blue-500">
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                {/* Twitter/X icon path */}
              </svg>
            </a>
            <a href="https://linkedin.com" aria-label="LinkedIn" className="text-gray-600 hover:text-blue-700">
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                {/* LinkedIn icon path */}
              </svg>
            </a>
            <a href="https://github.com" aria-label="GitHub" className="text-gray-600 hover:text-gray-900">
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                {/* GitHub icon path */}
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  );
}```

## 2. Implement Form State Management [pending]
### Dependencies: None
### Description: Complete the form state management including form data handling, validation with Zod, and form submission state tracking.
### Details:
Update the ContactForm component to handle form state:
```typescript
'use client';
import { useState } from 'react';
import { z } from 'zod';
import { Button } from '@/components/ui/Button';

const formSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email address'),
  message: z.string().min(10, 'Message must be at least 10 characters')
});

type FormData = z.infer<typeof formSchema>;

export default function ContactForm() {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    message: ''
  });
  const [errors, setErrors] = useState<Partial<Record<keyof FormData, string>>>({});
  const [status, setStatus] = useState<'idle' | 'submitting' | 'success' | 'error'>('idle');

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (errors[name as keyof FormData]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    try {
      formSchema.parse(formData);
      setErrors({});
      return true;
    } catch (error) {
      if (error instanceof z.ZodError) {
        const newErrors: Partial<Record<keyof FormData, string>> = {};
        error.errors.forEach(err => {
          if (err.path[0]) {
            newErrors[err.path[0] as keyof FormData] = err.message;
          }
        });
        setErrors(newErrors);
      }
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setStatus('submitting');
    
    // Form submission will be implemented in another subtask
    // Placeholder for now
    setTimeout(() => {
      setStatus('success');
      setFormData({ name: '', email: '', message: '' });
    }, 1000);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* Form fields will be implemented in another subtask */}
    </form>
  );
}```

## 3. Create Form UI Components [pending]
### Dependencies: 7.2
### Description: Implement the form UI components with proper accessibility attributes, labels, and error message display.
### Details:
Update the ContactForm component to include the form UI elements:
```typescript
// Add this to the existing ContactForm component
return (
  <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-sm space-y-4">
    <div>
      <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
        Name
      </label>
      <input
        id="name"
        name="name"
        type="text"
        value={formData.name}
        onChange={handleChange}
        className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none ${errors.name ? 'border-red-500' : 'border-gray-300'}`}
        aria-invalid={!!errors.name}
        aria-describedby={errors.name ? 'name-error' : undefined}
        disabled={status === 'submitting'}
      />
      {errors.name && (
        <p id="name-error" className="mt-1 text-sm text-red-600">
          {errors.name}
        </p>
      )}
    </div>

    <div>
      <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
        Email
      </label>
      <input
        id="email"
        name="email"
        type="email"
        value={formData.email}
        onChange={handleChange}
        className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none ${errors.email ? 'border-red-500' : 'border-gray-300'}`}
        aria-invalid={!!errors.email}
        aria-describedby={errors.email ? 'email-error' : undefined}
        disabled={status === 'submitting'}
      />
      {errors.email && (
        <p id="email-error" className="mt-1 text-sm text-red-600">
          {errors.email}
        </p>
      )}
    </div>

    <div>
      <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
        Message
      </label>
      <textarea
        id="message"
        name="message"
        rows={5}
        value={formData.message}
        onChange={handleChange}
        className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none ${errors.message ? 'border-red-500' : 'border-gray-300'}`}
        aria-invalid={!!errors.message}
        aria-describedby={errors.message ? 'message-error' : undefined}
        disabled={status === 'submitting'}
      />
      {errors.message && (
        <p id="message-error" className="mt-1 text-sm text-red-600">
          {errors.message}
        </p>
      )}
    </div>

    <Button 
      type="submit" 
      disabled={status === 'submitting'}
      className="w-full"
    >
      {status === 'submitting' ? 'Sending...' : 'Send Message'}
    </Button>
  </form>
);```

## 5. Add Success and Error Feedback UI [pending]
### Dependencies: 7.2, 7.3, 7.4
### Description: Implement success and error feedback UI components to provide clear visual feedback to users after form submission.
### Details:
Add success and error message components to the ContactForm:
```typescript
// Add these imports at the top of the file
import { CheckCircle, AlertCircle, RefreshCw } from 'lucide-react';

// Add this function inside the ContactForm component
const renderFormStatus = () => {
  if (status === 'success') {
    return (
      <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-md flex items-start">
        <CheckCircle className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
        <div>
          <h3 className="text-sm font-medium text-green-800">Message Sent!</h3>
          <p className="mt-1 text-sm text-green-700">
            Thank you for reaching out. We'll get back to you as soon as possible.
          </p>
          <button 
            onClick={() => setStatus('idle')} 
            className="mt-2 text-sm text-green-600 hover:text-green-800 font-medium flex items-center"
          >
            <RefreshCw className="h-4 w-4 mr-1" />
            Send another message
          </button>
        </div>
      </div>
    );
  }
  
  if (status === 'error') {
    return (
      <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-md flex items-start">
        <AlertCircle className="h-5 w-5 text-red-500 mr-3 flex-shrink-0 mt-0.5" />
        <div>
          <h3 className="text-sm font-medium text-red-800">Something went wrong</h3>
          <p className="mt-1 text-sm text-red-700">
            We couldn't send your message. Please try again or contact us directly via email.
          </p>
          <button 
            onClick={() => setStatus('idle')} 
            className="mt-2 text-sm text-red-600 hover:text-red-800 font-medium flex items-center"
          >
            <RefreshCw className="h-4 w-4 mr-1" />
            Try again
          </button>
        </div>
      </div>
    );
  }
  
  return null;
};

// Update the return statement to include the status messages
return (
  <div>
    {status === 'success' ? (
      renderFormStatus()
    ) : (
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-sm space-y-4">
        {/* Existing form fields */}
        
        <Button 
          type="submit" 
          disabled={status === 'submitting'}
          className="w-full flex items-center justify-center"
        >
          {status === 'submitting' ? (
            <>
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Sending...
            </>
          ) : 'Send Message'}
        </Button>
        
        {status === 'error' && renderFormStatus()}
      </form>
    )}
  </div>
);```

Update the OG image metadata in the page component:
```typescript
// In app/contact/page.tsx, update the metadata object
export const metadata: Metadata = {
  title: 'Contact Us - P&D Web Development',
  description: 'Get in touch with P&D Web Development for your web development needs',
  openGraph: {
    title: 'Contact Us - P&D Web Development',
    description: 'Get in touch with P&D Web Development for your web development needs',
    images: ['/images/og/contact.jpg'],
    type: 'website',
  },
};```

