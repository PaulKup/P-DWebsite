# Task ID: 1
# Title: Project Setup and Configuration
# Status: pending
# Dependencies: None
# Priority: high
# Description: Initialize the Next.js 14 project with TypeScript, configure Tailwind CSS, and set up development tooling.
# Details:
1. Create a new Next.js 14 project with App Router and TypeScript:
```bash
npx create-next-app@latest --typescript --eslint --tailwind --app
```
2. Install and configure additional dependencies:
```bash
npm install shadcn-ui @radix-ui/react-* class-variance-authority zod
npm install -D eslint prettier prettier-plugin-tailwindcss vitest jest @testing-library/react husky lint-staged
```
3. Set up ESLint and Prettier configuration files
4. Configure Husky for pre-commit hooks
5. Set up environment variables as specified in PRD section 13
6. Create folder structure for components, layouts, and pages
7. Configure Tailwind with the brand colors, spacing, and typography from the style guide

# Test Strategy:
1. Verify all dependencies are correctly installed
2. Ensure ESLint and Prettier run without errors
3. Confirm Husky hooks are working properly
4. Test that environment variables are properly loaded
5. Validate the Tailwind configuration against the style guide

# Subtasks:
## 1. Initialize Next.js 14 Project with TypeScript [pending]
### Dependencies: None
### Description: Create a new Next.js 14 project with App Router and TypeScript support, and install all required dependencies for the project.
### Details:
Run the following command to create a new Next.js 14 project:

npx create-next-app@latest my-project-name --typescript --eslint --tailwind --app

Navigate to the project directory:

cd my-project-name

Install additional dependencies:

npm install shadcn-ui @radix-ui/react-dialog @radix-ui/react-dropdown-menu @radix-ui/react-slot class-variance-authority zod
npm install -D eslint prettier prettier-plugin-tailwindcss vitest jest @testing-library/react @testing-library/jest-dom husky lint-staged

## 2. Configure ESLint, Prettier, and Husky [pending]
### Dependencies: None
### Description: Set up code quality tools including ESLint for linting, Prettier for code formatting, and Husky for pre-commit hooks to ensure code quality.
### Details:
Create or update .eslintrc.js file:

module.exports = {
  extends: ['next/core-web-vitals', 'prettier'],
  rules: {
    'react/no-unescaped-entities': 'off',
    'react/display-name': 'off'
  }
}

Create .prettierrc file:

{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100,
  "plugins": ["prettier-plugin-tailwindcss"]
}

Set up Husky:

npm install -D husky lint-staged
npx husky install
npm pkg set scripts.prepare="husky install"
npx husky add .husky/pre-commit "npx lint-staged"

Create .lintstagedrc.js file:

module.exports = {
  '*.{js,jsx,ts,tsx}': ['eslint --fix', 'prettier --write'],
  '*.{json,css,md}': ['prettier --write']
}

## 3. Set Up Environment Variables and Project Structure [pending]
### Dependencies: None
### Description: Configure environment variables and create the folder structure for components, layouts, and pages according to Next.js 14 App Router conventions.
### Details:
Create .env.local file with required variables:

NEXT_PUBLIC_API_URL=http://localhost:3001
MAIL_FROM=noreply@example.com
MAIL_TO=owner@example.com
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=user
SMTP_PASS=password

Create .env.example with the same structure but placeholder values.

Create the following folder structure:

app/
  components/
    ui/
    layout/
    home/
    services/
    about/
    contact/
  lib/
  utils/
  hooks/
  services/
  types/
  (routes)/
    page.tsx
    about/
      page.tsx
    services/
      page.tsx
    contact/
      page.tsx
  layout.tsx
  globals.css

## 4. Configure Tailwind CSS with Brand Styling [pending]
### Dependencies: None
### Description: Set up Tailwind CSS configuration with custom theme extensions for brand colors, spacing, typography, and other design tokens from the style guide.
### Details:
Update tailwind.config.js with brand styling:

module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}'
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          primary: '#0055FF',
          secondary: '#00AAFF',
          accent: '#FF5500',
          light: '#F0F7FF',
          dark: '#003399'
        },
        ink: {
          dark: '#1A1A1A',
          medium: '#4D4D4D',
          light: '#717171'
        },
        sand: {
          light: '#F7F7F7',
          medium: '#E6E6E6',
          dark: '#CCCCCC'
        }
      },
      spacing: {
        // 8-pt grid system
        '1': '8px',
        '2': '16px',
        '3': '24px',
        '4': '32px',
        '5': '40px',
        '6': '48px'
      },
      borderRadius: {
        sm: '4px',
        md: '8px',
        lg: '16px',
        xl: '24px'
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif']
      },
      fontSize: {
        xs: ['12px', '16px'],
        sm: ['14px', '20px'],
        base: ['16px', '24px'],
        lg: ['18px', '28px'],
        xl: ['20px', '30px'],
        '2xl': ['24px', '32px'],
        '3xl': ['30px', '38px'],
        '4xl': ['36px', '44px']
      }
    }
  },
  plugins: []
}

Set up Inter font in app/layout.tsx:

import { Inter } from 'next/font/google';

const inter = Inter({ subsets: ['latin'], display: 'swap' });

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  );
}

## 5. Create Base Component Library Setup [pending]
### Dependencies: None
### Description: Set up the initial component library structure with base UI components using shadcn-ui and the project's design system.
### Details:
Set up shadcn-ui CLI:

npx shadcn-ui@latest init

When prompted, configure:
- Style: Default
- Base color: Slate
- Global CSS: app/globals.css
- CSS variables: Yes
- React Server Components: Yes
- Components directory: app/components/ui
- Utility folder: app/lib/utils

Install base components:

npx shadcn-ui@latest add button
npx shadcn-ui@latest add card
npx shadcn-ui@latest add input
npx shadcn-ui@latest add form
npx shadcn-ui@latest add dialog
npx shadcn-ui@latest add dropdown-menu

Create a components.json file in the root directory:

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/app/components",
    "utils": "@/app/lib/utils"
  }
}

Create a basic component test page in app/design-system/page.tsx to showcase the components.

