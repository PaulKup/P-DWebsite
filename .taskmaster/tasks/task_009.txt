# Task ID: 9
# Title: Analytics and Performance Optimization
# Status: pending
# Dependencies: 4, 5, 6, 7
# Priority: medium
# Description: Implement analytics, optimize performance, and ensure the site meets Lighthouse score requirements.
# Details:
1. Set up analytics:
```typescript
// app/layout.tsx
import PlausibleAnalytics from '@/components/PlausibleAnalytics';
// or
import GoogleAnalytics from '@/components/GoogleAnalytics';

// Add to layout component
<PlausibleAnalytics />
```
2. Implement cookie banner if using GA4
3. Optimize images and fonts:
   - Ensure all images use next/image with width/height
   - Verify fonts are properly loaded with next/font
4. Implement performance optimizations:
   - Add appropriate caching headers
   - Implement code splitting
   - Optimize Tailwind by purging unused styles
5. Add JSON-LD structured data for SEO
6. Implement metadata for all pages
7. Run Lighthouse audits and fix issues to meet score requirements

# Test Strategy:
1. Verify analytics is tracking correctly
2. Run Lighthouse audits to ensure scores meet requirements (Performance ≥ 90, Accessibility ≥ 95, SEO ≥ 95)
3. Test Core Web Vitals (LCP < 2.5s, CLS < 0.1)
4. Verify structured data using testing tools
5. Test cookie banner functionality if implemented
6. Verify all images are properly optimized

# Subtasks:
## 1. Set up analytics integration [pending]
### Dependencies: None
### Description: Implement either Plausible Analytics or Google Analytics 4 in the application layout, including a cookie consent banner if using GA4.
### Details:
1. Create the analytics component:
- For Plausible: Create `components/PlausibleAnalytics.tsx` with the script tag and domain configuration
- For GA4: Create `components/GoogleAnalytics.tsx` with the appropriate tracking code
2. If using GA4, implement a cookie consent banner component in `components/CookieBanner.tsx` that stores user consent in localStorage
3. Import and add the analytics component to `app/layout.tsx`
4. Configure any environment variables needed for analytics in `.env.local`

## 2. Optimize images and fonts loading [pending]
### Dependencies: 9.1
### Description: Ensure all images use next/image with proper dimensions and optimize font loading with next/font to improve performance.
### Details:
1. Audit all image usage across the application and replace standard <img> tags with next/image components
2. Add explicit width and height attributes to all images to prevent layout shifts
3. Configure image quality and formats in next.config.js
4. Verify all fonts are loaded using next/font with appropriate subsets
5. Create a fonts.ts file to centralize font definitions:
```typescript
import { Inter } from 'next/font/google';

export const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter'
});
```
6. Apply font variables consistently in the global CSS

## 4. Add structured data and metadata [pending]
### Dependencies: 9.3
### Description: Implement JSON-LD structured data for SEO and ensure all pages have appropriate metadata including title, description, and Open Graph tags.
### Details:
1. Create a reusable JsonLd component in `components/JsonLd.tsx`:
```typescript
export default function JsonLd({ data }: { data: any }) {
  return (
    <script
      type="application/ld+json"
      dangerouslySetInnerHTML={{ __html: JSON.stringify(data) }}
    />
  );
}
```
2. Implement organization schema in the layout:
```typescript
const organizationData = {
  '@context': 'https://schema.org',
  '@type': 'Organization',
  name: 'Company Name',
  url: 'https://example.com',
  logo: 'https://example.com/logo.png',
  // additional organization data
};
```
3. Add page-specific structured data (Article, Product, etc.) as needed
4. Create a metadata export in each page file:
```typescript
export const metadata: Metadata = {
  title: 'Page Title | Site Name',
  description: 'Page description',
  openGraph: {
    title: 'Page Title',
    description: 'Page description',
    images: [{ url: '/og-image.jpg', width: 1200, height: 630 }],
  },
};
```

## 5. Run Lighthouse audits and fix issues [pending]
### Dependencies: 9.1, 9.2, 9.3, 9.4
### Description: Perform Lighthouse audits to identify and fix performance, accessibility, SEO, and best practices issues to meet score requirements.
### Details:
1. Run Lighthouse audits in Chrome DevTools for both mobile and desktop versions
2. Address performance issues to achieve a score ≥ 90:
   - Eliminate render-blocking resources
   - Optimize First Contentful Paint and Largest Contentful Paint
   - Minimize unused JavaScript
3. Fix accessibility issues to achieve a score ≥ 95:
   - Ensure proper contrast ratios
   - Add missing ARIA attributes
   - Fix heading hierarchy
4. Address SEO issues to achieve a score ≥ 95:
   - Fix missing alt text
   - Ensure tap targets are properly sized
   - Fix crawlable links
5. Document the optimization process and results in a performance.md file

